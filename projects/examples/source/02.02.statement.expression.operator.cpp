#include <cassert>
#include <cmath>

int main()
{
	const auto b1 = true, b2 = false;

	assert((    ! b1) == 0);
	assert((    ! b2) == 1);

//  ================================================================================================

	assert((b1 && b2) == 0);
	assert((b1 || b2) == 1);

//  ================================================================================================

	assert(!(b1 && b2) == (!b1 || !b2));
	assert(!(b1 || b2) == (!b1 && !b2));

	assert(((b1 && b2) && (1 + 2 == 3)) == 0);

//  ================================================================================================

	auto x = 1, y = 2;

	assert((  +  y) == +2);
	assert((  -  y) == -2);

//  ================================================================================================

	assert((x +  y) == +3);
	assert((x -  y) == -1);
	assert((x *  y) == +2);
	assert((x /  y) == +0);
	assert((x %  y) == +1);

//  ================================================================================================

	assert((x += y) == +3);
	assert((x -= y) == +1);
	assert((x *= y) == +2);
	assert((x /= y) == +1);
	assert((x %= y) == +1);

//  ================================================================================================

	assert((  ++ y) == +3);
	assert((  -- y) == +2);
	assert((x ++  ) == +1);
	assert((x --  ) == +2);

//  ================================================================================================

	assert((x <  y) ==  1);
	assert((x >  y) ==  0);
	assert((x <= y) ==  1);
	assert((x >= y) ==  0);
	assert((x == y) ==  0);
	assert((x != y) ==  1);
	
//  ================================================================================================

	assert((!!x != !!y) == 0);

	const auto d1 = 1.0, d2 = 2.0;

	assert(std::abs(d1 / d2 - 0.5) < 0.000001);

	assert(( x %  y) == +1);
	assert(( x % -y) == +1);
	assert((-x %  y) == -1);
	assert((-x % -y) == -1);

//	x+++++y; // error

	x = x + y; y = x - y; x = x - y;

//  ================================================================================================

	[[maybe_unused]] auto z = (1 + 4) / (2 + 3);

//	z = (z + ++z); // error

	[[maybe_unused]] auto m = 1 + 2 + 3;
	[[maybe_unused]] auto n = x = y = z;

//	assert((++m, ++n) == 2); // bad

	return 0;
}
