///////////////////////////////////////////////////////////////////////////

#include <mutex>
#include <utility>

///////////////////////////////////////////////////////////////////////////

class Entity
{
public :

    using mutex_t = std::mutex;

//  -----------------------------------------------------------------------

    Entity(int x) : m_x(x) {}

//  -----------------------------------------------------------------------

    void swap(Entity & other)
    {
        std::scoped_lock < mutex_t, mutex_t > lock(m_mutex, other.m_mutex);

        std::swap(m_x, other.m_x);
    }

private :

    int m_x = 0;
    
//  -----------------------------------------------------------------------

    mutable mutex_t m_mutex;
};

///////////////////////////////////////////////////////////////////////////

int main()
{
    Entity entity_1(1);

    Entity entity_2(2);

//  ------------------------

    entity_1.swap(entity_2);
}

///////////////////////////////////////////////////////////////////////////