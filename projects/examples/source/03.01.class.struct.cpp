#include <cassert>
#include <vector>

//  ================================================================================================

struct Data { int x{}, y{}, z{}; };

//  ================================================================================================

[[nodiscard]] inline Data make_data(int x, int y, int z) 
{ 
	return Data { x, y, z }; 
}

//  ================================================================================================

int main()
{
	[[maybe_unused]] Data data_1, data_2{};
	
	[[maybe_unused]] Data data_3 { 1 }, data_4 { 1, 2 }, data_5 { 1, 2, 3 };
	
	[[maybe_unused]] Data data_6 { .x = 1, .z = 3 };
	
//	[[maybe_unused]] Data data_7 { .y = 2, .x = 1 }; // error

//  ================================================================================================

	data_1.x = 1;

	const auto ptr = &data_1;

//	(*ptr).y = 2; // bad

	ptr->y = 2;

	auto & ref = data_1.z;

	ref = 3;

//  ================================================================================================

	assert
	(
		static_cast < void * > (&data_1  ) == 
		static_cast < void * > (&data_1.x)
	);

//  ================================================================================================

	data_1 = { 1, 2, 3 };

	data_1 = { .x = 1, .z = 3 };

//  ================================================================================================

	[[maybe_unused]] const Data data_8;

//	data_8.x = 1; // error

//  ================================================================================================

	std::vector < Data > vector { {}, { 1, 2, 3 }, make_data(1, 2, 3) };

	return 0;
}