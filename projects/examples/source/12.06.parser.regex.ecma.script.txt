. - 1 произвольный символ

() - группа, {} - количество, [] - класс

======================================================

{n  } - суффикс,    n      символов или групп символов
{n, } - суффикс, от n      символов или групп символов
{n,m} - суффикс, от n до m символов или групп символов

?     - суффикс, от 0 до 1 символов или групп символов
*     - суффикс, от 0      символов или групп символов
+     - суффикс, от 1      символов или групп символов

======================================================

[a-z] - 1 буква из диапазона (lowercase)
[A-Z] - 1 буква из диапазона (uppercase)
[0-9] - 1 цифра из диапазона

[:alnum:] - название класса, буквы и цифры
[:alpha:] - название класса, буквы
[:digit:] - название класса, цифры
[:space:] - название класса, пробельные символы

===================================================

\ - префикс, следующий символ имеет особое значение

\w эквивалентно [[:alnum:]_]
\d эквивалентно [[:digit:]]
\s эквивалентно [[:space:]]

\b - граница слова, начало или конец

| - логическое или, ^ - логическое отрицание

============================================================

Пример 1 : .(AB?C*)+(D{3})|(E{2,4}) // support: regex101.com

Пример 2 : <(.*)>(.*)</(\1)> - дескрипторы XML/HTML, \1 означает повторение первой группы

Пример 3 : Идентификаторы языка C++ состоят из букв, цифр и _, первый символ не цифра

-------------------------------------------------------------------------------------

Версия 1 : [:alpha:][:alnum:]*             - плохо
Версия 2 : [[:alpha:]][[:alnum:]]*         - плохо
Версия 3 : ([[:alpha:]]|_)[[:alnum:]]*     - плохо
Версия 4 : ([[:alpha:]]|_)([[:alnum:]]|_)* - удовлетворительно
Версия 5 : [_[:alpha:]][_[:alnum:]]*       - хорошо
Версия 6 : [_[:alpha:]]\w*                 - отлично